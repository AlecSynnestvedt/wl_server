require("dotenv").config();
const Express = require('express');
const app = Express();
const dbConnection = require("./db");

const controllers = require("./controllers");

app.use(Express.json());

app.use("/user", controllers.userController);

app.use(require("./middleware/validate-jwt"));
app.use("/wl", controllers.logController);

dbConnection.authenticate()
  .then(() => dbConnection.sync())
  .then(() => {
    app.listen(5000, () => {
      console.log(`[Server]: App is listening on 5000.`);
    });
  })
  .catch((err) => {
    console.log(`[Server]: Server has crashed. Error = ${err}`);
  });



// CRITERIA
// Have User Authentication
// Follow an MVC pattern.
// Persist data to Postgres.
// Use all of the key concepts studied in the previous modules, including jwt, bcrypt, and middleware.
// You will build a client later, using React. You do not need a client for this. We will use this to teach client side Authentication with React.
// Your endpoints must show signs of having been tested(screenshots of successful Postman request in a Readme.md file are always handy)
 

// Required Endpoints
// The project should have the following endpoints:

// Endpoint	Verb	Description
// /user/register	POST	Allows a new user to be created with a username and password.
// /user/login	POST	Allows log in with an existing user.
// /log/	POST	Allows users to create a workout log with descriptions, definitions, results, and owner properties.
// /log/	GET	Gets all logs for an individual user.
// /log/:id	GET	Gets individual logs by id for an individual user.
// /log/:id	PUT	Allows individual logs to be updated by a user.
// /log/:id	DELETE	Allows individual logs to be deleted by a user.
 

// Data Models
// user.js

// In addition to the columns automatically generated by Sequelize, the user.js model requires the following columns and data-types:

// Property	Type
// username	STRING
// passwordhash	STRING
 

// log.js

// In addition to the columns automatically generated by Sequelize, the log.js model requires the following columns and data-types:

// Property	Type
// description	STRING
// definition	STRING
// result	STRING
// owner_id	INTEGER
 

// Additional Information
// The user should not provide the id associated with their user account. This value should come from the validateSession middleware function. 
